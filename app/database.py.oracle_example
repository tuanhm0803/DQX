from dotenv import load_dotenv
import os
import oracledb  # Changed from psycopg2 to oracledb

# Determine the project root directory
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
DOTENV_PATH = os.path.join(PROJECT_ROOT, '.env')

# Load environment variables from .env file in the project root
if os.path.exists(DOTENV_PATH):
    load_dotenv(DOTENV_PATH)
else:
    print(f"Warning: .env file not found at {DOTENV_PATH}")

# Database connection parameters
# Oracle connection uses different parameters than PostgreSQL
DB_USER = os.getenv("ORACLE_USER")
DB_PASSWORD = os.getenv("ORACLE_PASSWORD")
DB_HOST = os.getenv("ORACLE_HOST", "localhost")
DB_PORT = os.getenv("ORACLE_PORT", "1521")  # Default Oracle port
DB_SERVICE = os.getenv("ORACLE_SERVICE")  # Oracle service name

# You can use a DSN (connection string) instead
ORACLE_DSN = os.getenv("ORACLE_DSN")

# For backward compatibility
DATABASE_URL = os.getenv("DATABASE_URL")

# Dependency to get DB connection
def get_db():
    conn = None  # Initialize conn to None
    try:
        # If DSN is provided, use it
        if ORACLE_DSN:
            conn = oracledb.connect(ORACLE_DSN)
        # Otherwise use individual parameters
        elif DB_USER and DB_PASSWORD and DB_SERVICE:
            dsn_tns = oracledb.makedsn(DB_HOST, DB_PORT, service_name=DB_SERVICE)
            conn = oracledb.connect(user=DB_USER, password=DB_PASSWORD, dsn=dsn_tns)
        # Fall back to DATABASE_URL if it's in the right format
        elif DATABASE_URL:
            # Parse DATABASE_URL if it's in Oracle format
            conn = oracledb.connect(DATABASE_URL)
        else:
            raise ValueError("Database connection parameters not properly set")
        
        yield conn
    finally:
        if conn:
            conn.close()
